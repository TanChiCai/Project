package com.example.hotelapp.ui.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.stayeasehotel.model.UserEntity
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.UserProfileChangeRequest
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.launch
import java.util.Calendar
import java.util.regex.Pattern

class UserSigninViewModel : ViewModel() {
    private val _uiState = MutableStateFlow(UserEntity())
    val uiState: StateFlow<UserEntity> = _uiState.asStateFlow()

    private val auth = FirebaseAuth.getInstance()
    private val db = FirebaseFirestore.getInstance()

    fun updateField(field: String, value: String) {
        val currentState = _uiState.value
        _uiState.value = when (field) {
            "email" -> currentState.copy(email = value, errorMessage = null)
            "password" -> currentState.copy(password = value, errorMessage = null)
            "confirmPassword" -> currentState.copy(confirmPassword = value, errorMessage = null)
            "name" -> currentState.copy(name = value, errorMessage = null)
            "gender" -> currentState.copy(gender = value, errorMessage = null)
            "areaCode" -> currentState.copy(areaCode = value, errorMessage = null)
            "phoneNumber" -> currentState.copy(phoneNumber = value, errorMessage = null)
            "day" -> currentState.copy(day = value, errorMessage = null)
            "month" -> currentState.copy(month = value, errorMessage = null)
            "year" -> currentState.copy(year = value, errorMessage = null)
            else -> currentState
        }
    }

    fun isValidEmail(email: String): Boolean {
        val emailPattern = Pattern.compile("^[A-Za-z0-9+_.-]+@gmail\\.com$")
        return emailPattern.matcher(email).matches()
    }

    private fun isValidPhone(areaCode: String, phoneNumber: String): Boolean {
        return areaCode.length == 3 && phoneNumber.length in 7..8
    }

    private fun isValidDate(day: String, month: String, year: String): Boolean {
        if (day.length != 2 || month.length != 2 || year.length != 4) return false

        val dayInt = day.toIntOrNull() ?: return false
        val monthInt = month.toIntOrNull() ?: return false
        val yearInt = year.toIntOrNull() ?: return false

        if (dayInt !in 1..31 || monthInt !in 1..12 || yearInt !in 1900..2100) return false

        val currentDate = Calendar.getInstance()
        val inputDate = Calendar.getInstance().apply {
            set(yearInt, monthInt - 1, dayInt)
        }

        return !inputDate.after(currentDate)
    }

    private fun validateForm(): String? {
        val state = _uiState.value
        return when {
            state.name.isBlank() -> "Please enter your full name"
            state.email.isBlank() -> "Please enter your email"
            !isValidEmail(state.email) -> "Email must be in format: ...@gmail.com"
            state.areaCode.isBlank() || state.phoneNumber.isBlank() -> "Please enter your phone number"
            !isValidPhone(state.areaCode, state.phoneNumber) -> "Phone must be in format: 000-0000000"
            state.gender.isBlank() -> "Please select your gender"
            state.day.isBlank() || state.month.isBlank() || state.year.isBlank() -> "Please enter your date of birth"
            !isValidDate(state.day, state.month, state.year) -> {
                if (state.day.length != 2 || state.month.length != 2 || state.year.length != 4) {
                    "Date must be in valid format: DD-MM-YYYY"
                } else {
                    val inputDate = Calendar.getInstance().apply {
                        set(state.year.toInt(), state.month.toInt() - 1, state.day.toInt())
                    }
                    val currentDate = Calendar.getInstance()

                    if (inputDate.after(currentDate)) {
                        "Date of birth cannot be in the future"
                    } else {
                        "Please enter a valid date"
                    }
                }
            }
            state.password.isBlank() -> "Please enter a password"
            state.password.length < 6 -> "Password must be at least 6 characters"
            state.confirmPassword.isBlank() -> "Please confirm your password"
            state.password != state.confirmPassword -> "Passwords do not match"
            else -> null
        }
    }

    private suspend fun checkEmailExists(email: String): Boolean {
        return try {
            // Check in Users collection
            val userQuery = db.collection("Users")
                .whereEqualTo("email", email)
                .get()
                .await()

            // Check in Staff collection
            val staffQuery = db.collection("Staff")
                .whereEqualTo("email", email)
                .get()
                .await()

            !userQuery.isEmpty || !staffQuery.isEmpty
        } catch (e: Exception) {
            false
        }
    }

    fun signUp(
        onSuccess: () -> Unit,
        onError: (String) -> Unit
    ) {
        val validationError = validateForm()
        if (validationError != null) {
            _uiState.value = _uiState.value.copy(errorMessage = validationError)
            onError(validationError)
            return
        }

        val state = _uiState.value
        _uiState.value = state.copy(isLoading = true, errorMessage = null)

        viewModelScope.launch {
            try {
                // Check if email already exists
                val emailExists = checkEmailExists(state.email)
                if (emailExists) {
                    _uiState.value = state.copy(
                        isLoading = false,
                        errorMessage = "Email already exists"
                    )
                    onError("Email already exists")
                    return@launch
                }

                // 1. Create authentication account
                val authResult = auth.createUserWithEmailAndPassword(
                    state.email,
                    state.password
                ).await()

                val userId = authResult.user?.uid ?: throw Exception("User ID is null")

                // 2. Update user profile with name
                val profileUpdates = UserProfileChangeRequest.Builder()
                    .setDisplayName(state.name)
                    .build()
                authResult.user?.updateProfile(profileUpdates)?.await()

                // 3. Save user data to Firestore
                val userData = hashMapOf(
                    "userId" to userId,
                    "name" to state.name,
                    "email" to state.email,
                    "phoneNum" to "${state.areaCode}-${state.phoneNumber}",
                    "gender" to state.gender,
                    "dateOfBirth" to "${state.day}-${state.month}-${state.year}",
                    "password" to state.password
                )

                db.collection("Users").document(userId).set(userData).await()

                onSuccess()
            } catch (e: Exception) {
                val errorMsg = "Registration failed: ${e.message}"
                _uiState.value = state.copy(
                    isLoading = false,
                    errorMessage = errorMsg
                )
                onError(errorMsg)
            }
        }
    }
}
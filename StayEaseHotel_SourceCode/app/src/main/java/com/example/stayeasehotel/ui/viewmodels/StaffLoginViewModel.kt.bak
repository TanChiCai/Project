package com.example.hotelapp.ui.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.stayeasehotel.model.StaffEntity
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.launch

class StaffLoginViewModel : ViewModel() {
    private val _uiState = MutableStateFlow(StaffEntity())
    val uiState: StateFlow<StaffEntity> = _uiState.asStateFlow()

    private val auth = FirebaseAuth.getInstance()
    private val db = FirebaseFirestore.getInstance()

    fun updateEmail(email: String) {
        _uiState.value = _uiState.value.copy(email = email, errorMessage = null)
    }

    fun updatePassword(password: String) {
        _uiState.value = _uiState.value.copy(password = password, errorMessage = null)
    }

    fun login(
        onSuccess: () -> Unit,
        onError: (String) -> Unit
    ) {
        val currentState = _uiState.value

        if (currentState.email.isBlank() || currentState.password.isBlank()) {
            _uiState.value = currentState.copy(errorMessage = "Please fill in all fields")
            return
        }

        _uiState.value = currentState.copy(isLoading = true, errorMessage = null)

        viewModelScope.launch {
            try {
                // Direct Firebase authentication
                val authResult = auth.signInWithEmailAndPassword(
                    currentState.email,
                    currentState.password
                ).await()

                val userId = authResult.user?.uid ?: throw Exception("Login failed")

                // Check user type directly in Firestore
                val userType = getUserType(userId)

                if (userType == "staff") {
                    onSuccess()
                } else {
                    auth.signOut()
                    _uiState.value = currentState.copy(
                        isLoading = false,
                        errorMessage = "This is not a staff account"
                    )
                    onError("This is not a staff account")
                }
            } catch (e: Exception) {
                auth.signOut()
                val errorMsg = "Login failed: ${e.message}"
                _uiState.value = currentState.copy(
                    isLoading = false,
                    errorMessage = errorMsg
                )
                onError(errorMsg)
            }
        }
    }

    private suspend fun getUserType(userId: String): String {
        return try {
            // Check if user exists in Staff collection first
            val staffDoc = db.collection("Staff").document(userId).get().await()
            if (staffDoc.exists()) {
                "staff"
            } else {
                // Check if user exists in Users collection
                val userDoc = db.collection("Users").document(userId).get().await()
                if (userDoc.exists()) {
                    "user"
                } else {
                    "unknown"
                }
            }
        } catch (e: Exception) {
            "unknown"
        }
    }
}